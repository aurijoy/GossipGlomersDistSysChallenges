plugins {
    id 'java-library'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
}

// Removing these as project direction is different and using wrapper to build up.
/*group 'io.github.lant.maelstrom-java'
version '1.0'*/

// No Artifacting to MavenCentral since shooting off from wrapper to actual solving the problems
/*repositories {
    mavenCentral()
}*/

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/example/*"
            ])
        }))
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
    withJavadocJar()
    withSourcesJar()
}

/*
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'maelstrom-java'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }

            pom {
                name = 'Maelstrom-java'
                description = 'A java wrapper to write Maelstrom clients'
                url = 'https://www.github.com/lant/maelstrom-java'

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'marcdepalol'
                        name = 'Marc de Palol'
                        email = 'marcdepalol@posteo.net'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/lant/maelstrom-java.git'
                    developerConnection = 'scm:git:ssh://github.com/lant/maelstrom-java.git'
                    url = 'https://github.com/lant/maelstrom-java.git'
                }
            }
        }
    }
    repositories {
        maven {
            credentials {
                username = ossrhUsername
                password = ossrhPassword
            }
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}
*/
/*
signing {
    sign publishing.publications.mavenJava
}
*/
